Oppgaver til Avsnitt 1.1.1
    1. 	Søk på internett med navnet al-Khwarizmi som søkeord. Hva finner du?

Informasjon og lenker til hvem al-Khwarizmi er og hva han er kjent for.


    2. 	Lag en norsk versjon av den engelske algoritme-definisjonen over!

En algoritme er en vell-ordnet samling av entydlige og effektivt beregnlige operasjoners som, når utføres, produserer et resultat og stopper i en avgrenset mengde tid.


    3. 	Søk på internett etter alle sider som inneholder ordene data structure (eventuelt data structures) og algorithm (eventuelt algorithms). Hvor mange treff får du?

data structure: 47 800 000
data structures: 57 700 000
algorithm: 621 000 000
algorithms: 605 000 000




Oppgaver til Avsnitt 1.1.2
    1. 	Anta at vi har en min-metode, dvs. en metode som finner (og returnerer) posisjonen til den minste verdien i en tabell. Hva ville metodekallet min(a) returnere med hvis a er tabellen i Figur 1.1.2?

6


    2. 	Lag en min-metode på samme måte som maks-metoden i Programkode 1.1.2, dvs. en metode som finner (og returnerer) posisjonen til den minste verdien i en tabell.

// Oppgavekode 1.1.2 | 2.
public static int min(int[] a) {
    if (a.length < 1) throw new java.util.NoSuchElementException("Tabellen er tom");

    int m = 0;

    for (int i = 1; i < a.length; i++) {
        if (a[i] < a[m]) m = i;
    }

    return m;
}

    3. 	Hvis den største verdien forekommer flere ganger, vil maks-metoden returnere posisjonen til den første av dem. Hva må endres for at den skal returnere posisjonen til den siste?

Vi endrer if-setningen fra å være "a[i] > a[m]" til "a[i] >= a[m]".
Det er også mulig å gå gjennom tabellen i motsatt rekkefølge. Da starter vi altså på enden og dekrementere med -1 hver gang for-løkken gjennomgås.




Oppgaver til Avsnitt 1.1.3
1. 	Et eksempel på en oppgave som kan løses på mange forskjellige måter er det å sortere verdiene i en tabell. Hvor mange sorteringsalgoritmer kjenner du til? På Wikipedia finner du en oversikt over sorteringsalgoritmer.

Select sort         utvalgssortering
Insertioin sort     innsettingssortering
Bubble sort         boblesortering
Quick sort          kvikksortering
Merge sort          flettesortering
Heap sort           heapsortering
Radix sort          grunntallssortering



2. 	Gitt en tabell med verdiene 10, 5, 7, 2, 9, 1, 3, 8, 4, 6. Hvor mange grunnleggende operasjoner vil algoritmen i Programkode 1.1.2 utføre på denne tabellen. Se regnskapet over og Eksempel 1.1.3.

if (a.length < 1)       = 1
int m = 0;              = 1
int i = 1;              = 1
i < a.length;           = n
i++                     = n - 1
if (a[i] > a[m])        = 3(n - 1)
m = i;                  = x
return m;               = 1

1 + 1 + 1 + n + n - 1 + 3(n - 1) + x + 1

5n + x

5*10 + 0 = 50


3. 	Som oppgave 2, men med verdiene 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.

5*10 + 9 = 59


4. 	Som oppgave 2, men med verdiene 1, 3, 2, 7, 5, 9, 6, 8, 10, 4.

5*10 + 4 = 54


5. 	Lag en metode public static int[] minmaks(int[] a). Den skal ved hjelp av en int-tabell med lengde 2 returnere posisjonene til minste og største verdi i tabellen a. Hvis du har funnet at m1 er posisjonen til den minste og m2 til den største, kan du returnere tabellen b definert ved:   int[] b = {m1, m2}; Hvor mange sammenligninger bruker metoden din?

// Oppgavekode 1.1.3 | 5.
public static int[] minmaks(int[] a) {
    if (a.length < 1) throw new java.util.NoSuchElementException("Tabellen er tom!");

    int min = 0;
    int maks = 0;
    int minverdi = a[0];
    int maksverdi = a[0];

    for (int i = 1; i < a.length; i++) {

        if (a[i] < minverdi) {
            min = i;
            minverdi = a[i];
        }
        else if (a[i] > maksverdi) maks = i;
    }

    int[] resultat = {min, maks};

    return resultat;
}


6. 	Utrykket n! betyr n fakultet og er gitt ved n! = n · (n-1) ·  ·  · 2 · 1 . Lag en metode
long fak(int n) som regner ut n! . Hvor mange multiplikasjoner utføres i metoden?

// Oppgavekode 1.1.3 | 6.
public static long fak(int n) {
    if (n < 0) throw new IllegalArgumentException("n < 0");
    long total = n;
    while (n > 1) {
        n--;
        total *= n;
    }
    return total;
}



Oppgaver til Avsnitt 1.1.4
    1. 	Hvor mange grunnleggende operasjoner utfører Programkode 1.1.4 hvis tabellen a inneholder i) 10, 5, 7, 2, 9, 1, 3, 8, 4, 6  ii) 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 og iii) 1, 3, 2, 7, 5, 9, 6, 8, 10, 4. Sammenlign med svarene i oppgave 2, 3 og 4 fra Avsnitt 1.1.3.


Grunnleggende operasjoner:
1 + 1 + 1 + n + n - 1 + 2(n - 1) + 3x + 1
1 + 4n + 3x

i)
1 + 4*10 + 0
41

ii)
1 + 4*10 + 9
50

iii)
1 + 4*10 + 4
45




Oppgaver til Avsnitt 1.1.5
    1. 	Sjekk at Programkode 1.1.5 gir korrekte resultater. Hva skjer hvis a har lengde 1 og hva hvis a er tom (lengde 0). Se også Avsnitt 1.1.7.

public static int maks(int[] a)  // versjon 3 av maks-metoden
{
    int sist = a.length - 1;                                // 1
    int m = 0;                                              // 1
    int maksverdi = a[0];                                   // 2
    int temp = a[sist];                                     // 2
    a[sist] = 0x7fffffff;                                   // 2

    for (int i = 0; ; i++)                                  // 1 | n - 1
        if (a[i] >= maksverdi)                              // 2(n - 1)
        {
            if (i == sist)                                  // x
            {
              a[sist] = temp;                               // 2x
              return temp >= maksverdi ? sist : m;          // 2x
            }
            else
            {
              maksverdi = a[i];                             // 2x
              m = i;                                        // x
            }
        }
}

Grunnleggende operasjoner: 1 + 1 + 2 + 2 + 2 + 1 + n - 1 + 2(n - 1) + x + 2x + 2x + 2x
                           4 + 3n + x + (4x || 3x)


    2. 	Gjør om Programkode 1.1.5 slik at posisjonen til den første av dem returneres hvis den største verdien ligger flere steder.

public static int maks(int[] a)
{
    int sist = a.length - 1;
    int m = 0;
    int maksverdi = a[0];
    int temp = a[sist];
    a[sist] = 0x7fffffff;

    for (int i = 0; ; i++)
        if (a[i] >= maksverdi)
        {
            if (i == sist)
            {
              a[sist] = temp;
              return temp > maksverdi ? sist : m;  // Fjerne = fra >=
            }
            else if (a[i] > maksverdi) // Legge til if
            {
              maksverdi = a[i];
              m = i;
            }
        }
}


    3. 	En vaktpostverdi må være større enn eller lik alle mulige tabellverdier. Men ikke alle typer har en maksverdi slik som int har. Vi kan isteden la tabellens siste posisjon hele tiden inneholde det samme som hjelpevariablen maksverdi. Dermed vil  a[i] >= maksverdi helt sikker bli sann når i blir lik sist. Innfør denne idéen i Programkode 1.1.5.

public static int maks(int[] a)
{
    int sist = a.length - 1;
    int m = 0;
    int maksverdi = a[0];
    int temp = a[sist];
    a[sist] = maksverdi;

    for (int i = 0; ; i++)
        if (a[i] >= maksverdi)
        {
            if (i == sist)
            {
              a[sist] = temp;
              return temp >= maksverdi ? sist : m;
            }
            else
            {
              maksverdi = a[i];
              a[sist] = maksverdi;
              m = i;
            }
        }
}




Oppgaver til Avsnitt 1.1.6
    1. 	Vis at Setning 1.1.6 a) stemmer for n = 5. Se på alle de 120 forskjellige permutasjonene av tallene 1, 2, 3, 4 og 5. Flg. observasjon kan forenkle arbeidet: De 24 permutasjonene der 5 står først, inneholder ingen tall som er større enn alle foran. Blant de 24 der 5 står som nr 2, vil det være nøyaktig ett tall (5 selv) som er større enn de foran. Osv.

???


    2. 	La a(n,k) være antallet permutasjoner av 1, . . , n  som har nøyaktig k tall som er større enn det største foran. F.eks. er a(3,1) = 3 fordi de tre permutasjonene (1,3,2), (2,1,3) og (2,3,1) (og ingen andre) har nøyaktig ett tall som er større enn alle foran. Finn a(3,0), a(3,2), a(4,0), a(4,1), a(4,2) og a(4,3).

???


    3. 	Lag metoden public static double harmonisk(int n). Metoden skal ved hjelp av en løkke regne ut (og returnere) det n-te harmoniske tallet.

// Oppgavekode 1.1.6 | 3.
public static double harmonisk(int n) {
    double total = 0.0;
    for (int i = 1; i <= n; i++) {
        total += 1.0 / i;
    }
    return total;
}

    4. 	Lag metoden public static double euler(int n). Den skal returnere differansen mellom Hn og log(n). I Java gir Math.log(n) oss den naturlige logaritmen til n. Hvor stor må n være for at euler(n) skal returnere et tall som starter med 0,577 som de tre første desimalene?

// Oppgavekode 1.1.6 | 4.
public static double euler(int n) {
    return harmonisk(n) - Math.log(n);
}


    5. 	Lag en programbit som gir resultatene i Tabell 1.1.6.

// Oppgavekode 1.1.6 | 3.
public static double oppgave1_1_6__3(int n) {
    /*return Math.log(n) - 0.423;*/
    double total = 0.0;
    for (int i = 2; i <= n; i++) {
        total += 1.0 / i;
    }
    return total;
}

int n = 10;
for (int i = 0; i < 7; i++) // utføres 7 ganger
{
    double x = Math.log(n) - 0.423;
    System.out.printf("n = %-8d   ln(n)-0.423 = %4.1f\n",n,x);
    n *= 10;
}




Oppgaver til Avsnitt 1.1.7
    1. 	Lag et main-program med metoden makstest der Programkode 1.1.2 testes. Hva skjer?

Se klasse: Oppgave1_1_7__1 for kode.
Når koden kjøres skjer ingenting ettersom det ikke oppstår feil.


    2. 	Utvid metoden makstest. Bruk tabeller der den største er først, er sist og forekommer flere steder. Bruk en tabell med kun én verdi, kun to verdier som er ulike og kun to verdier som er like. Lag en test for en null-tabell. La også makstest returnere antall feil.




    3. 	Bruk makstest på de to versjonene i Programkode 1.1.4 og 1.1.5. Da vil det bl.a. komme melding om at det kastes feil unntak for en tom tabell. Hvilket unntak kastes? Gjør om koden slik at rett unntak kastes. Programkode 1.1.5 gir feil svar hvis den største verdien ligger flere steder. Rett opp koden! Se også Oppgave 2 i Avsnitt 1.1.5.




    4. 	Sett deg inn i begrepet assert i Java.




    5. 	Lag et program som kjører Programkode 1.1.7 c). Gjør om koden slik at resultatet fanges, dvs. bruk koden: OptionalInt m = maks(a); Sjekk deretter om resultat har innhold (isPresent) og hvis den har det, skriv ut verdien ved å bruke getAsInt. Finn ut hvilke andre metoder klassen OptionalInt har.




Oppgaver til Avsnitt 1.1.8
    1.	Kjør den kodebiten som kommer rett etter Programkode 1.1.8 b) flere ganger og sjekk at det hele tiden kommer ut permutasjoner av tallene fra 1 til 10.

// Oppgave 1.1.8 | 1.


    2.	Flg. kodebit viser hvor lang tid det tar å generere en tilfeldig permutasjon av tallene fra 1 til n ved å bruke Programkode 1.1.8 b):

      int n = 10000;
      long tid = System.currentTimeMillis();
      int[] a = randPerm(n);
      tid = System.currentTimeMillis() - tid;
      System.out.println(tid);

    Hvor mange millisekunder bruker denne kodebiten på din maskin? Øk verdien på n slik at kodebiten bruker ca. 5 sekunder (5000 millisekunder).

10 000: ca 100 - 130
65 000: ca 5000


    3.	Vis at metoden i Programkode 1.1.8 b) er av orden n2^2log(n) i gjennomsnitt.

// Programkode 1.1.8 b)
public static int[] randPerm2(int n) {
    Random r = new Random();                    1
    int[] a = new int[n];                       1

    for (int i = 0; i < n; ) {                  1 && n
        int k = r.nextInt(n) + 1;               n

        int j = 0;                              1
        for ( ; j < i; j++) {                   n^2 && n^2 - n
            if (a[j] == k) {                    2n^2
                break;                          x
            }
        }
        if (i == j) {                           n - 1
            a[i++] = k;                         3x  // a[] -> tabelloperasjon, i++ -> regneoperasjon, = -> tilordning
        }
    }

    return a;                                   1
}
???


    4.	Sjekk at randPerm-versjonen i Programkode 1.1.8 c) virker som den skal. Se Oppgave 1. Du kan f.eks. omdøpe den første til randPerm1 og den andre til randPerm2.

// Oppgave 1.1.8 | 4.
// Programmkode 1.1.8 c)
System.out.println(Arrays.toString(randPerm3(10)));


    5.	Gjør som i Oppgave 2, men bruk randPerm-versjonen i Programkode 1.1.8 c). Er det stor forskjell på de to versjonene?

Veldig stor forskjell med 10 000:
randPerm b) = 100
randPerm c) = 3


    6.	Vis at randPerm-versjonen i Programkode 1.1.8 c) er av orden n log(n) i gjennomsnitt.

// Programkode 1.1.8 c)
public static int[] randPerm3(int n) {
    Random r = new Random();                    1
    int[] a = new int[n];                       1
    boolean[] har = new boolean[n];             1

    for (int i = 0; i < n; ) {                  1 && n
        int k = r.nextInt(n);                   n - 1
        if (!har[k]) {                          2(n - 1)
            har[k] = true;                      2x // tabellaksessering, tilordning
            a[i++] = k + 1;                     4x // tabellaksessering, regneoperasjon, tilordning, regneoperasjon
        }
    }

    return a;                                   1
}


    7.	I randPerm-versjonen i Programkode 1.1.8 c) brukes det en boolsk hjelpetabell. Gjør om metoden slik at den bruker samme idé, men uten hjelpetabellen. Første kall på nextInt(n) gir en indeks k. Vi legger så inn 1 i a[k]. Neste kall på nextInt(n) gir en ny indeks k. Hvis a[k] ikke er 0, kaller vi nextInt(n) på nytt. Hvis derimot a[k] er 0, legger vi inn 2 i a[k]. Osv. til hele a er fylt opp.

// Oppgavekode 1.1.8 | 7.


    8.	Sjekk at den versjonen av randPerm som står i Programkode 1.1.8 e) virker som den skal. Se Oppgave 1. Du kan f.eks. omdøpe den første versjonen til randPerm1, den andre til randPerm2 og denne til randPerm3.

// Programkode 1.1.8 e)


    9.	Gjør som i Oppgave 2, men bruk randPerm-versjonen i Programkode 1.1.8 e). Er det stor forskjell på de tre versjonene? Hvilken av dem bør vi ta vare på og bruke senere når vi trenger en slik metode?

Veldig stor forskjell med 100 000:
randPerm b) = 13584
randPerm c) = 12
randPerm e) = 7


    10.	I Programkode 1.1.8 e) blir tallene som «fjernes» fra «beholderen» (tabellens «hvite» del) isteden lagt over i den «grå» delen. Lag en versjon av metoden der den «grå» delen er den venstre delen av tabellen og den «hvite» delen den høyre delen.

// Oppgavekode 1.1.8 | 10.
public static int[] randPerm6(int n) {
    Random r = new Random();
    int[] a = new int[n];

    Arrays.setAll(a, i -> i + 1);

    for (int k = 0; k < n; k++) {
        int i = r.nextInt(a.length - k);
        bytt(a,k,i);
    }

    return a;
}


    11.	Lag void randPerm(int[] a, int v, int h) slik at den stokker om intervallet a[v:h] i tabellen a. Resten av tabellen skal være uberørt. Se Programkode 1.1.8 f).

// Oppgavekode 1.1.8 | 11.


    12.	Tar vi ut fortløpende (uten tilbakelegging) k tilfeldige tall fra 1 til n får vi et ordnet k-utvalg (eller en k-permutasjon). Lag metoden int[] randPerm(int n, int k). Den skal returnere et tilfeldig ordnet k-utvalg (0 <= k <= n).




    13.	Java har ingen ferdig metode som lager en tilfeldig heltallstabell. En omvei: Legg tallene fra 1 til n i en ArrayList<Integer>, bruk metoden shuffle i klassen Collections og hent så tallene fra listen og legg dem over i en int-tabell. Prøv dette!



















