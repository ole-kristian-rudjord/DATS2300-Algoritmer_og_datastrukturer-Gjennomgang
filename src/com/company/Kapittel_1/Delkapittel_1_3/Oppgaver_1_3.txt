Oppgaver til Avsnitt 1.3.1
    1.	Legg metodene fra Programkode 1.3.1 a) og Programkode 1.3.1 b) i samleklassen Tabell.

//pk 1.3.1 a)
//pk 1.3.1 b)


    2.	Gitt flg. permutasjoner av tallene fra 1 til 6: a) 2 3 6 1 4 5, b) 2 3 6 1 5 4,
    c) 2 3 1 6 5 4, d) 2 3 6 5 4 1 og e) 2 6 5 4 3 1. Finn, for hver av dem, den neste i leksikografisk rekkefølge. Bruk så metoden nestePermutasjon som fasit.




    3.	Skriv opp de 10 første permutasjonene som kommer etter 3 1 4 9 7 10 8 6 5 2 leksikografisk. Bruk metoden nestePermutasjon som fasit.

//ok 1.3.1 | 3.


    4.	Lag kode som først skriver ut de 6 permutasjonene (én per linje) av tallene 1,2,3. Gjenta dette med de 24 permutasjonene av 1,2,3,4.

//ok 1.3.1 | 4.


    5.	Kjør Programkode 1.3.1 d). Gjenta kjøringen med n = 6. Da skal resultatet bli 1044. Sjekk at det er lik (1/2 + 1/3 + . . + 1/6)·6! Gjenta med n = 7.




Oppgaver til Avsnitt 1.3.2
    1.	Hvor mange inversjoner har premutasjonen 3 5 4 7 6 8 1 2 9 10 ?

2 + 3 + 2 + 3 + 2 + 2 + 0 + 0 + 0 + 0 = 14
//ok 1.3.2 | 1.


    2.	Finn en permutasjon av tallene fra 1 til 10 med 22 inversjoner og en som har 23 stykker.

10 9 1 2 8 3 4 5 6 7
7 6 5 4 3 8 2 1 9 10



Oppgaver til Avsnitt 1.3.3
    1.	Sjekk at Programkode 1.3.3 f) virker. Lag en serie permutasjoner (bruk randPerm) av tallene fra 1 til 10. Skriv ut resultatet.

//ok 1.3.3 | 1.


    2.	Sammenlign Programkode 1.3.3 e) og f). Kall dem boblesortering1 og boblesortering2. Lag så store tilfeldige permutasjoner at den ene bruker noen sekunder. Ta en kopi før du sorterer. Hvor lang tid vil den andre bruke (på kopien).




    3.	Lag en versjon der gjennomgangene går motsatt vei (fra høyre mot venstre).

//ok 1.3.3 | 3.


    4.	Lag kode som generer innholdet i tabellen i Figur 1.3.3 b). Både vha. formelen k!kn-k og ved å generere alle mulige permutasjoner og så telle opp.




    5.	I gjennomgang k (k = 1 til n − 1) i Programkode 1.3.3 e) blir det i gjennomsnitt utført n + k (Hk − Hn − 1) ombyttinger. Se Formel 1.3.3 a). Med n = 10 og k = 1, blir det lik 7,07. La fortsatt n være 10. Hva blir det for k = 2 og 3? Lag kode som regner (og skriver) det ut for hver k. Summér alle verdiene og sjekk at summen blir lik n(k − 1)/4.














